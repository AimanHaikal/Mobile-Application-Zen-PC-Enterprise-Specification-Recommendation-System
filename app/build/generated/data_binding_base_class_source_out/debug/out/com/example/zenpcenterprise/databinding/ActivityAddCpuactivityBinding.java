// Generated by view binder compiler. Do not edit!
package com.example.zenpcenterprise.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.zenpcenterprise.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityAddCpuactivityBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button cancelCPUButton;

  @NonNull
  public final EditText editCPUFrequency;

  @NonNull
  public final EditText editCPUName;

  @NonNull
  public final EditText editCPUPrice;

  @NonNull
  public final EditText editCPUSocket;

  @NonNull
  public final EditText editCore;

  @NonNull
  public final Button submitCPUButton;

  @NonNull
  public final TextView textAddCPU;

  @NonNull
  public final TextView textCPUFrequency;

  @NonNull
  public final TextView textCPUName;

  @NonNull
  public final TextView textCPUPrice;

  @NonNull
  public final TextView textCPUSocket;

  @NonNull
  public final TextView textCore;

  private ActivityAddCpuactivityBinding(@NonNull ConstraintLayout rootView,
      @NonNull Button cancelCPUButton, @NonNull EditText editCPUFrequency,
      @NonNull EditText editCPUName, @NonNull EditText editCPUPrice,
      @NonNull EditText editCPUSocket, @NonNull EditText editCore, @NonNull Button submitCPUButton,
      @NonNull TextView textAddCPU, @NonNull TextView textCPUFrequency,
      @NonNull TextView textCPUName, @NonNull TextView textCPUPrice,
      @NonNull TextView textCPUSocket, @NonNull TextView textCore) {
    this.rootView = rootView;
    this.cancelCPUButton = cancelCPUButton;
    this.editCPUFrequency = editCPUFrequency;
    this.editCPUName = editCPUName;
    this.editCPUPrice = editCPUPrice;
    this.editCPUSocket = editCPUSocket;
    this.editCore = editCore;
    this.submitCPUButton = submitCPUButton;
    this.textAddCPU = textAddCPU;
    this.textCPUFrequency = textCPUFrequency;
    this.textCPUName = textCPUName;
    this.textCPUPrice = textCPUPrice;
    this.textCPUSocket = textCPUSocket;
    this.textCore = textCore;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityAddCpuactivityBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityAddCpuactivityBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_add_cpuactivity, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityAddCpuactivityBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.cancelCPUButton;
      Button cancelCPUButton = ViewBindings.findChildViewById(rootView, id);
      if (cancelCPUButton == null) {
        break missingId;
      }

      id = R.id.editCPUFrequency;
      EditText editCPUFrequency = ViewBindings.findChildViewById(rootView, id);
      if (editCPUFrequency == null) {
        break missingId;
      }

      id = R.id.editCPUName;
      EditText editCPUName = ViewBindings.findChildViewById(rootView, id);
      if (editCPUName == null) {
        break missingId;
      }

      id = R.id.editCPUPrice;
      EditText editCPUPrice = ViewBindings.findChildViewById(rootView, id);
      if (editCPUPrice == null) {
        break missingId;
      }

      id = R.id.editCPUSocket;
      EditText editCPUSocket = ViewBindings.findChildViewById(rootView, id);
      if (editCPUSocket == null) {
        break missingId;
      }

      id = R.id.editCore;
      EditText editCore = ViewBindings.findChildViewById(rootView, id);
      if (editCore == null) {
        break missingId;
      }

      id = R.id.submitCPUButton;
      Button submitCPUButton = ViewBindings.findChildViewById(rootView, id);
      if (submitCPUButton == null) {
        break missingId;
      }

      id = R.id.textAddCPU;
      TextView textAddCPU = ViewBindings.findChildViewById(rootView, id);
      if (textAddCPU == null) {
        break missingId;
      }

      id = R.id.textCPUFrequency;
      TextView textCPUFrequency = ViewBindings.findChildViewById(rootView, id);
      if (textCPUFrequency == null) {
        break missingId;
      }

      id = R.id.textCPUName;
      TextView textCPUName = ViewBindings.findChildViewById(rootView, id);
      if (textCPUName == null) {
        break missingId;
      }

      id = R.id.textCPUPrice;
      TextView textCPUPrice = ViewBindings.findChildViewById(rootView, id);
      if (textCPUPrice == null) {
        break missingId;
      }

      id = R.id.textCPUSocket;
      TextView textCPUSocket = ViewBindings.findChildViewById(rootView, id);
      if (textCPUSocket == null) {
        break missingId;
      }

      id = R.id.textCore;
      TextView textCore = ViewBindings.findChildViewById(rootView, id);
      if (textCore == null) {
        break missingId;
      }

      return new ActivityAddCpuactivityBinding((ConstraintLayout) rootView, cancelCPUButton,
          editCPUFrequency, editCPUName, editCPUPrice, editCPUSocket, editCore, submitCPUButton,
          textAddCPU, textCPUFrequency, textCPUName, textCPUPrice, textCPUSocket, textCore);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}

// Generated by view binder compiler. Do not edit!
package com.example.zenpcenterprise.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ScrollView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.zenpcenterprise.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityGenerateBuildPcactivityBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ScrollView ScrollGeneratePC;

  @NonNull
  public final TextView generateAirFlow;

  @NonNull
  public final TextView generateAirFlowTextView;

  @NonNull
  public final TextView generateCFM;

  @NonNull
  public final TextView generateCPUCoolingName;

  @NonNull
  public final TextView generateCPUCoolingNameTextView;

  @NonNull
  public final TextView generateCPUCoolingPrice;

  @NonNull
  public final TextView generateCPUCoolingPriceTextView;

  @NonNull
  public final TextView generateCPUCoolingTextView;

  @NonNull
  public final TextView generateCPUFrequency;

  @NonNull
  public final TextView generateCPUFrequencyTextView;

  @NonNull
  public final TextView generateCPUName;

  @NonNull
  public final TextView generateCPUNameTextView;

  @NonNull
  public final TextView generateCPUPrice;

  @NonNull
  public final TextView generateCPUPriceTextView;

  @NonNull
  public final TextView generateCPUTextView;

  @NonNull
  public final TextView generateCaseName;

  @NonNull
  public final TextView generateCaseNameTextView;

  @NonNull
  public final TextView generateCasePrice;

  @NonNull
  public final TextView generateCasePriceTextView;

  @NonNull
  public final TextView generateCaseTextView;

  @NonNull
  public final TextView generateCore;

  @NonNull
  public final TextView generateCoreFrequency;

  @NonNull
  public final TextView generateCoreFrequencyTextView;

  @NonNull
  public final TextView generateCoreMHz;

  @NonNull
  public final TextView generateCoreTextView;

  @NonNull
  public final TextView generateGB;

  @NonNull
  public final TextView generateGHz;

  @NonNull
  public final TextView generateGPUName;

  @NonNull
  public final TextView generateGPUNameTextView;

  @NonNull
  public final TextView generateGPUPrice;

  @NonNull
  public final TextView generateGPUPriceTextView;

  @NonNull
  public final TextView generateGPUTextView;

  @NonNull
  public final TextView generateMBs;

  @NonNull
  public final TextView generateMHz;

  @NonNull
  public final TextView generateMemoryFrequency;

  @NonNull
  public final TextView generateMemoryFrequencyTextView;

  @NonNull
  public final TextView generateMemoryMHz;

  @NonNull
  public final TextView generateMotherboardName;

  @NonNull
  public final TextView generateMotherboardNameTextView;

  @NonNull
  public final TextView generateMotherboardPrice;

  @NonNull
  public final TextView generateMotherboardPriceTextView;

  @NonNull
  public final TextView generateMotherboardTextView;

  @NonNull
  public final TextView generatePCTextView;

  @NonNull
  public final TextView generatePSUName;

  @NonNull
  public final TextView generatePSUNameTextView;

  @NonNull
  public final TextView generatePSUPrice;

  @NonNull
  public final TextView generatePSUPriceTextView;

  @NonNull
  public final TextView generatePSUTextView;

  @NonNull
  public final TextView generateRAMFrequency;

  @NonNull
  public final TextView generateRAMFrequencyTextView;

  @NonNull
  public final TextView generateRAMGB;

  @NonNull
  public final TextView generateRAMName;

  @NonNull
  public final TextView generateRAMNameTextView;

  @NonNull
  public final TextView generateRAMPrice;

  @NonNull
  public final TextView generateRAMPriceTextView;

  @NonNull
  public final TextView generateRAMSize;

  @NonNull
  public final TextView generateRAMSizeTextView;

  @NonNull
  public final TextView generateRAMTextView;

  @NonNull
  public final TextView generateStorageName;

  @NonNull
  public final TextView generateStorageNameTextView;

  @NonNull
  public final TextView generateStoragePrice;

  @NonNull
  public final TextView generateStoragePriceTextView;

  @NonNull
  public final TextView generateStorageSize;

  @NonNull
  public final TextView generateStorageSizeTextView;

  @NonNull
  public final TextView generateStorageTextView;

  @NonNull
  public final TextView generateTotalPrice;

  @NonNull
  public final TextView generateTotalPriceTextView;

  @NonNull
  public final TextView generateTransferSpeed;

  @NonNull
  public final TextView generateTransferSpeedTextView;

  @NonNull
  public final TextView generateVRAM;

  @NonNull
  public final TextView generateVRAMGB;

  @NonNull
  public final TextView generateVRAMTextView;

  @NonNull
  public final TextView generateW;

  @NonNull
  public final TextView generateWattage;

  @NonNull
  public final TextView generateWattageTextView;

  private ActivityGenerateBuildPcactivityBinding(@NonNull ConstraintLayout rootView,
      @NonNull ScrollView ScrollGeneratePC, @NonNull TextView generateAirFlow,
      @NonNull TextView generateAirFlowTextView, @NonNull TextView generateCFM,
      @NonNull TextView generateCPUCoolingName, @NonNull TextView generateCPUCoolingNameTextView,
      @NonNull TextView generateCPUCoolingPrice, @NonNull TextView generateCPUCoolingPriceTextView,
      @NonNull TextView generateCPUCoolingTextView, @NonNull TextView generateCPUFrequency,
      @NonNull TextView generateCPUFrequencyTextView, @NonNull TextView generateCPUName,
      @NonNull TextView generateCPUNameTextView, @NonNull TextView generateCPUPrice,
      @NonNull TextView generateCPUPriceTextView, @NonNull TextView generateCPUTextView,
      @NonNull TextView generateCaseName, @NonNull TextView generateCaseNameTextView,
      @NonNull TextView generateCasePrice, @NonNull TextView generateCasePriceTextView,
      @NonNull TextView generateCaseTextView, @NonNull TextView generateCore,
      @NonNull TextView generateCoreFrequency, @NonNull TextView generateCoreFrequencyTextView,
      @NonNull TextView generateCoreMHz, @NonNull TextView generateCoreTextView,
      @NonNull TextView generateGB, @NonNull TextView generateGHz,
      @NonNull TextView generateGPUName, @NonNull TextView generateGPUNameTextView,
      @NonNull TextView generateGPUPrice, @NonNull TextView generateGPUPriceTextView,
      @NonNull TextView generateGPUTextView, @NonNull TextView generateMBs,
      @NonNull TextView generateMHz, @NonNull TextView generateMemoryFrequency,
      @NonNull TextView generateMemoryFrequencyTextView, @NonNull TextView generateMemoryMHz,
      @NonNull TextView generateMotherboardName, @NonNull TextView generateMotherboardNameTextView,
      @NonNull TextView generateMotherboardPrice,
      @NonNull TextView generateMotherboardPriceTextView,
      @NonNull TextView generateMotherboardTextView, @NonNull TextView generatePCTextView,
      @NonNull TextView generatePSUName, @NonNull TextView generatePSUNameTextView,
      @NonNull TextView generatePSUPrice, @NonNull TextView generatePSUPriceTextView,
      @NonNull TextView generatePSUTextView, @NonNull TextView generateRAMFrequency,
      @NonNull TextView generateRAMFrequencyTextView, @NonNull TextView generateRAMGB,
      @NonNull TextView generateRAMName, @NonNull TextView generateRAMNameTextView,
      @NonNull TextView generateRAMPrice, @NonNull TextView generateRAMPriceTextView,
      @NonNull TextView generateRAMSize, @NonNull TextView generateRAMSizeTextView,
      @NonNull TextView generateRAMTextView, @NonNull TextView generateStorageName,
      @NonNull TextView generateStorageNameTextView, @NonNull TextView generateStoragePrice,
      @NonNull TextView generateStoragePriceTextView, @NonNull TextView generateStorageSize,
      @NonNull TextView generateStorageSizeTextView, @NonNull TextView generateStorageTextView,
      @NonNull TextView generateTotalPrice, @NonNull TextView generateTotalPriceTextView,
      @NonNull TextView generateTransferSpeed, @NonNull TextView generateTransferSpeedTextView,
      @NonNull TextView generateVRAM, @NonNull TextView generateVRAMGB,
      @NonNull TextView generateVRAMTextView, @NonNull TextView generateW,
      @NonNull TextView generateWattage, @NonNull TextView generateWattageTextView) {
    this.rootView = rootView;
    this.ScrollGeneratePC = ScrollGeneratePC;
    this.generateAirFlow = generateAirFlow;
    this.generateAirFlowTextView = generateAirFlowTextView;
    this.generateCFM = generateCFM;
    this.generateCPUCoolingName = generateCPUCoolingName;
    this.generateCPUCoolingNameTextView = generateCPUCoolingNameTextView;
    this.generateCPUCoolingPrice = generateCPUCoolingPrice;
    this.generateCPUCoolingPriceTextView = generateCPUCoolingPriceTextView;
    this.generateCPUCoolingTextView = generateCPUCoolingTextView;
    this.generateCPUFrequency = generateCPUFrequency;
    this.generateCPUFrequencyTextView = generateCPUFrequencyTextView;
    this.generateCPUName = generateCPUName;
    this.generateCPUNameTextView = generateCPUNameTextView;
    this.generateCPUPrice = generateCPUPrice;
    this.generateCPUPriceTextView = generateCPUPriceTextView;
    this.generateCPUTextView = generateCPUTextView;
    this.generateCaseName = generateCaseName;
    this.generateCaseNameTextView = generateCaseNameTextView;
    this.generateCasePrice = generateCasePrice;
    this.generateCasePriceTextView = generateCasePriceTextView;
    this.generateCaseTextView = generateCaseTextView;
    this.generateCore = generateCore;
    this.generateCoreFrequency = generateCoreFrequency;
    this.generateCoreFrequencyTextView = generateCoreFrequencyTextView;
    this.generateCoreMHz = generateCoreMHz;
    this.generateCoreTextView = generateCoreTextView;
    this.generateGB = generateGB;
    this.generateGHz = generateGHz;
    this.generateGPUName = generateGPUName;
    this.generateGPUNameTextView = generateGPUNameTextView;
    this.generateGPUPrice = generateGPUPrice;
    this.generateGPUPriceTextView = generateGPUPriceTextView;
    this.generateGPUTextView = generateGPUTextView;
    this.generateMBs = generateMBs;
    this.generateMHz = generateMHz;
    this.generateMemoryFrequency = generateMemoryFrequency;
    this.generateMemoryFrequencyTextView = generateMemoryFrequencyTextView;
    this.generateMemoryMHz = generateMemoryMHz;
    this.generateMotherboardName = generateMotherboardName;
    this.generateMotherboardNameTextView = generateMotherboardNameTextView;
    this.generateMotherboardPrice = generateMotherboardPrice;
    this.generateMotherboardPriceTextView = generateMotherboardPriceTextView;
    this.generateMotherboardTextView = generateMotherboardTextView;
    this.generatePCTextView = generatePCTextView;
    this.generatePSUName = generatePSUName;
    this.generatePSUNameTextView = generatePSUNameTextView;
    this.generatePSUPrice = generatePSUPrice;
    this.generatePSUPriceTextView = generatePSUPriceTextView;
    this.generatePSUTextView = generatePSUTextView;
    this.generateRAMFrequency = generateRAMFrequency;
    this.generateRAMFrequencyTextView = generateRAMFrequencyTextView;
    this.generateRAMGB = generateRAMGB;
    this.generateRAMName = generateRAMName;
    this.generateRAMNameTextView = generateRAMNameTextView;
    this.generateRAMPrice = generateRAMPrice;
    this.generateRAMPriceTextView = generateRAMPriceTextView;
    this.generateRAMSize = generateRAMSize;
    this.generateRAMSizeTextView = generateRAMSizeTextView;
    this.generateRAMTextView = generateRAMTextView;
    this.generateStorageName = generateStorageName;
    this.generateStorageNameTextView = generateStorageNameTextView;
    this.generateStoragePrice = generateStoragePrice;
    this.generateStoragePriceTextView = generateStoragePriceTextView;
    this.generateStorageSize = generateStorageSize;
    this.generateStorageSizeTextView = generateStorageSizeTextView;
    this.generateStorageTextView = generateStorageTextView;
    this.generateTotalPrice = generateTotalPrice;
    this.generateTotalPriceTextView = generateTotalPriceTextView;
    this.generateTransferSpeed = generateTransferSpeed;
    this.generateTransferSpeedTextView = generateTransferSpeedTextView;
    this.generateVRAM = generateVRAM;
    this.generateVRAMGB = generateVRAMGB;
    this.generateVRAMTextView = generateVRAMTextView;
    this.generateW = generateW;
    this.generateWattage = generateWattage;
    this.generateWattageTextView = generateWattageTextView;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityGenerateBuildPcactivityBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityGenerateBuildPcactivityBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_generate_build_pcactivity, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityGenerateBuildPcactivityBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.ScrollGeneratePC;
      ScrollView ScrollGeneratePC = ViewBindings.findChildViewById(rootView, id);
      if (ScrollGeneratePC == null) {
        break missingId;
      }

      id = R.id.generateAirFlow;
      TextView generateAirFlow = ViewBindings.findChildViewById(rootView, id);
      if (generateAirFlow == null) {
        break missingId;
      }

      id = R.id.generateAirFlowTextView;
      TextView generateAirFlowTextView = ViewBindings.findChildViewById(rootView, id);
      if (generateAirFlowTextView == null) {
        break missingId;
      }

      id = R.id.generateCFM;
      TextView generateCFM = ViewBindings.findChildViewById(rootView, id);
      if (generateCFM == null) {
        break missingId;
      }

      id = R.id.generateCPUCoolingName;
      TextView generateCPUCoolingName = ViewBindings.findChildViewById(rootView, id);
      if (generateCPUCoolingName == null) {
        break missingId;
      }

      id = R.id.generateCPUCoolingNameTextView;
      TextView generateCPUCoolingNameTextView = ViewBindings.findChildViewById(rootView, id);
      if (generateCPUCoolingNameTextView == null) {
        break missingId;
      }

      id = R.id.generateCPUCoolingPrice;
      TextView generateCPUCoolingPrice = ViewBindings.findChildViewById(rootView, id);
      if (generateCPUCoolingPrice == null) {
        break missingId;
      }

      id = R.id.generateCPUCoolingPriceTextView;
      TextView generateCPUCoolingPriceTextView = ViewBindings.findChildViewById(rootView, id);
      if (generateCPUCoolingPriceTextView == null) {
        break missingId;
      }

      id = R.id.generateCPUCoolingTextView;
      TextView generateCPUCoolingTextView = ViewBindings.findChildViewById(rootView, id);
      if (generateCPUCoolingTextView == null) {
        break missingId;
      }

      id = R.id.generateCPUFrequency;
      TextView generateCPUFrequency = ViewBindings.findChildViewById(rootView, id);
      if (generateCPUFrequency == null) {
        break missingId;
      }

      id = R.id.generateCPUFrequencyTextView;
      TextView generateCPUFrequencyTextView = ViewBindings.findChildViewById(rootView, id);
      if (generateCPUFrequencyTextView == null) {
        break missingId;
      }

      id = R.id.generateCPUName;
      TextView generateCPUName = ViewBindings.findChildViewById(rootView, id);
      if (generateCPUName == null) {
        break missingId;
      }

      id = R.id.generateCPUNameTextView;
      TextView generateCPUNameTextView = ViewBindings.findChildViewById(rootView, id);
      if (generateCPUNameTextView == null) {
        break missingId;
      }

      id = R.id.generateCPUPrice;
      TextView generateCPUPrice = ViewBindings.findChildViewById(rootView, id);
      if (generateCPUPrice == null) {
        break missingId;
      }

      id = R.id.generateCPUPriceTextView;
      TextView generateCPUPriceTextView = ViewBindings.findChildViewById(rootView, id);
      if (generateCPUPriceTextView == null) {
        break missingId;
      }

      id = R.id.generateCPUTextView;
      TextView generateCPUTextView = ViewBindings.findChildViewById(rootView, id);
      if (generateCPUTextView == null) {
        break missingId;
      }

      id = R.id.generateCaseName;
      TextView generateCaseName = ViewBindings.findChildViewById(rootView, id);
      if (generateCaseName == null) {
        break missingId;
      }

      id = R.id.generateCaseNameTextView;
      TextView generateCaseNameTextView = ViewBindings.findChildViewById(rootView, id);
      if (generateCaseNameTextView == null) {
        break missingId;
      }

      id = R.id.generateCasePrice;
      TextView generateCasePrice = ViewBindings.findChildViewById(rootView, id);
      if (generateCasePrice == null) {
        break missingId;
      }

      id = R.id.generateCasePriceTextView;
      TextView generateCasePriceTextView = ViewBindings.findChildViewById(rootView, id);
      if (generateCasePriceTextView == null) {
        break missingId;
      }

      id = R.id.generateCaseTextView;
      TextView generateCaseTextView = ViewBindings.findChildViewById(rootView, id);
      if (generateCaseTextView == null) {
        break missingId;
      }

      id = R.id.generateCore;
      TextView generateCore = ViewBindings.findChildViewById(rootView, id);
      if (generateCore == null) {
        break missingId;
      }

      id = R.id.generateCoreFrequency;
      TextView generateCoreFrequency = ViewBindings.findChildViewById(rootView, id);
      if (generateCoreFrequency == null) {
        break missingId;
      }

      id = R.id.generateCoreFrequencyTextView;
      TextView generateCoreFrequencyTextView = ViewBindings.findChildViewById(rootView, id);
      if (generateCoreFrequencyTextView == null) {
        break missingId;
      }

      id = R.id.generateCoreMHz;
      TextView generateCoreMHz = ViewBindings.findChildViewById(rootView, id);
      if (generateCoreMHz == null) {
        break missingId;
      }

      id = R.id.generateCoreTextView;
      TextView generateCoreTextView = ViewBindings.findChildViewById(rootView, id);
      if (generateCoreTextView == null) {
        break missingId;
      }

      id = R.id.generateGB;
      TextView generateGB = ViewBindings.findChildViewById(rootView, id);
      if (generateGB == null) {
        break missingId;
      }

      id = R.id.generateGHz;
      TextView generateGHz = ViewBindings.findChildViewById(rootView, id);
      if (generateGHz == null) {
        break missingId;
      }

      id = R.id.generateGPUName;
      TextView generateGPUName = ViewBindings.findChildViewById(rootView, id);
      if (generateGPUName == null) {
        break missingId;
      }

      id = R.id.generateGPUNameTextView;
      TextView generateGPUNameTextView = ViewBindings.findChildViewById(rootView, id);
      if (generateGPUNameTextView == null) {
        break missingId;
      }

      id = R.id.generateGPUPrice;
      TextView generateGPUPrice = ViewBindings.findChildViewById(rootView, id);
      if (generateGPUPrice == null) {
        break missingId;
      }

      id = R.id.generateGPUPriceTextView;
      TextView generateGPUPriceTextView = ViewBindings.findChildViewById(rootView, id);
      if (generateGPUPriceTextView == null) {
        break missingId;
      }

      id = R.id.generateGPUTextView;
      TextView generateGPUTextView = ViewBindings.findChildViewById(rootView, id);
      if (generateGPUTextView == null) {
        break missingId;
      }

      id = R.id.generateMBs;
      TextView generateMBs = ViewBindings.findChildViewById(rootView, id);
      if (generateMBs == null) {
        break missingId;
      }

      id = R.id.generateMHz;
      TextView generateMHz = ViewBindings.findChildViewById(rootView, id);
      if (generateMHz == null) {
        break missingId;
      }

      id = R.id.generateMemoryFrequency;
      TextView generateMemoryFrequency = ViewBindings.findChildViewById(rootView, id);
      if (generateMemoryFrequency == null) {
        break missingId;
      }

      id = R.id.generateMemoryFrequencyTextView;
      TextView generateMemoryFrequencyTextView = ViewBindings.findChildViewById(rootView, id);
      if (generateMemoryFrequencyTextView == null) {
        break missingId;
      }

      id = R.id.generateMemoryMHz;
      TextView generateMemoryMHz = ViewBindings.findChildViewById(rootView, id);
      if (generateMemoryMHz == null) {
        break missingId;
      }

      id = R.id.generateMotherboardName;
      TextView generateMotherboardName = ViewBindings.findChildViewById(rootView, id);
      if (generateMotherboardName == null) {
        break missingId;
      }

      id = R.id.generateMotherboardNameTextView;
      TextView generateMotherboardNameTextView = ViewBindings.findChildViewById(rootView, id);
      if (generateMotherboardNameTextView == null) {
        break missingId;
      }

      id = R.id.generateMotherboardPrice;
      TextView generateMotherboardPrice = ViewBindings.findChildViewById(rootView, id);
      if (generateMotherboardPrice == null) {
        break missingId;
      }

      id = R.id.generateMotherboardPriceTextView;
      TextView generateMotherboardPriceTextView = ViewBindings.findChildViewById(rootView, id);
      if (generateMotherboardPriceTextView == null) {
        break missingId;
      }

      id = R.id.generateMotherboardTextView;
      TextView generateMotherboardTextView = ViewBindings.findChildViewById(rootView, id);
      if (generateMotherboardTextView == null) {
        break missingId;
      }

      id = R.id.generatePCTextView;
      TextView generatePCTextView = ViewBindings.findChildViewById(rootView, id);
      if (generatePCTextView == null) {
        break missingId;
      }

      id = R.id.generatePSUName;
      TextView generatePSUName = ViewBindings.findChildViewById(rootView, id);
      if (generatePSUName == null) {
        break missingId;
      }

      id = R.id.generatePSUNameTextView;
      TextView generatePSUNameTextView = ViewBindings.findChildViewById(rootView, id);
      if (generatePSUNameTextView == null) {
        break missingId;
      }

      id = R.id.generatePSUPrice;
      TextView generatePSUPrice = ViewBindings.findChildViewById(rootView, id);
      if (generatePSUPrice == null) {
        break missingId;
      }

      id = R.id.generatePSUPriceTextView;
      TextView generatePSUPriceTextView = ViewBindings.findChildViewById(rootView, id);
      if (generatePSUPriceTextView == null) {
        break missingId;
      }

      id = R.id.generatePSUTextView;
      TextView generatePSUTextView = ViewBindings.findChildViewById(rootView, id);
      if (generatePSUTextView == null) {
        break missingId;
      }

      id = R.id.generateRAMFrequency;
      TextView generateRAMFrequency = ViewBindings.findChildViewById(rootView, id);
      if (generateRAMFrequency == null) {
        break missingId;
      }

      id = R.id.generateRAMFrequencyTextView;
      TextView generateRAMFrequencyTextView = ViewBindings.findChildViewById(rootView, id);
      if (generateRAMFrequencyTextView == null) {
        break missingId;
      }

      id = R.id.generateRAMGB;
      TextView generateRAMGB = ViewBindings.findChildViewById(rootView, id);
      if (generateRAMGB == null) {
        break missingId;
      }

      id = R.id.generateRAMName;
      TextView generateRAMName = ViewBindings.findChildViewById(rootView, id);
      if (generateRAMName == null) {
        break missingId;
      }

      id = R.id.generateRAMNameTextView;
      TextView generateRAMNameTextView = ViewBindings.findChildViewById(rootView, id);
      if (generateRAMNameTextView == null) {
        break missingId;
      }

      id = R.id.generateRAMPrice;
      TextView generateRAMPrice = ViewBindings.findChildViewById(rootView, id);
      if (generateRAMPrice == null) {
        break missingId;
      }

      id = R.id.generateRAMPriceTextView;
      TextView generateRAMPriceTextView = ViewBindings.findChildViewById(rootView, id);
      if (generateRAMPriceTextView == null) {
        break missingId;
      }

      id = R.id.generateRAMSize;
      TextView generateRAMSize = ViewBindings.findChildViewById(rootView, id);
      if (generateRAMSize == null) {
        break missingId;
      }

      id = R.id.generateRAMSizeTextView;
      TextView generateRAMSizeTextView = ViewBindings.findChildViewById(rootView, id);
      if (generateRAMSizeTextView == null) {
        break missingId;
      }

      id = R.id.generateRAMTextView;
      TextView generateRAMTextView = ViewBindings.findChildViewById(rootView, id);
      if (generateRAMTextView == null) {
        break missingId;
      }

      id = R.id.generateStorageName;
      TextView generateStorageName = ViewBindings.findChildViewById(rootView, id);
      if (generateStorageName == null) {
        break missingId;
      }

      id = R.id.generateStorageNameTextView;
      TextView generateStorageNameTextView = ViewBindings.findChildViewById(rootView, id);
      if (generateStorageNameTextView == null) {
        break missingId;
      }

      id = R.id.generateStoragePrice;
      TextView generateStoragePrice = ViewBindings.findChildViewById(rootView, id);
      if (generateStoragePrice == null) {
        break missingId;
      }

      id = R.id.generateStoragePriceTextView;
      TextView generateStoragePriceTextView = ViewBindings.findChildViewById(rootView, id);
      if (generateStoragePriceTextView == null) {
        break missingId;
      }

      id = R.id.generateStorageSize;
      TextView generateStorageSize = ViewBindings.findChildViewById(rootView, id);
      if (generateStorageSize == null) {
        break missingId;
      }

      id = R.id.generateStorageSizeTextView;
      TextView generateStorageSizeTextView = ViewBindings.findChildViewById(rootView, id);
      if (generateStorageSizeTextView == null) {
        break missingId;
      }

      id = R.id.generateStorageTextView;
      TextView generateStorageTextView = ViewBindings.findChildViewById(rootView, id);
      if (generateStorageTextView == null) {
        break missingId;
      }

      id = R.id.generateTotalPrice;
      TextView generateTotalPrice = ViewBindings.findChildViewById(rootView, id);
      if (generateTotalPrice == null) {
        break missingId;
      }

      id = R.id.generateTotalPriceTextView;
      TextView generateTotalPriceTextView = ViewBindings.findChildViewById(rootView, id);
      if (generateTotalPriceTextView == null) {
        break missingId;
      }

      id = R.id.generateTransferSpeed;
      TextView generateTransferSpeed = ViewBindings.findChildViewById(rootView, id);
      if (generateTransferSpeed == null) {
        break missingId;
      }

      id = R.id.generateTransferSpeedTextView;
      TextView generateTransferSpeedTextView = ViewBindings.findChildViewById(rootView, id);
      if (generateTransferSpeedTextView == null) {
        break missingId;
      }

      id = R.id.generateVRAM;
      TextView generateVRAM = ViewBindings.findChildViewById(rootView, id);
      if (generateVRAM == null) {
        break missingId;
      }

      id = R.id.generateVRAMGB;
      TextView generateVRAMGB = ViewBindings.findChildViewById(rootView, id);
      if (generateVRAMGB == null) {
        break missingId;
      }

      id = R.id.generateVRAMTextView;
      TextView generateVRAMTextView = ViewBindings.findChildViewById(rootView, id);
      if (generateVRAMTextView == null) {
        break missingId;
      }

      id = R.id.generateW;
      TextView generateW = ViewBindings.findChildViewById(rootView, id);
      if (generateW == null) {
        break missingId;
      }

      id = R.id.generateWattage;
      TextView generateWattage = ViewBindings.findChildViewById(rootView, id);
      if (generateWattage == null) {
        break missingId;
      }

      id = R.id.generateWattageTextView;
      TextView generateWattageTextView = ViewBindings.findChildViewById(rootView, id);
      if (generateWattageTextView == null) {
        break missingId;
      }

      return new ActivityGenerateBuildPcactivityBinding((ConstraintLayout) rootView,
          ScrollGeneratePC, generateAirFlow, generateAirFlowTextView, generateCFM,
          generateCPUCoolingName, generateCPUCoolingNameTextView, generateCPUCoolingPrice,
          generateCPUCoolingPriceTextView, generateCPUCoolingTextView, generateCPUFrequency,
          generateCPUFrequencyTextView, generateCPUName, generateCPUNameTextView, generateCPUPrice,
          generateCPUPriceTextView, generateCPUTextView, generateCaseName, generateCaseNameTextView,
          generateCasePrice, generateCasePriceTextView, generateCaseTextView, generateCore,
          generateCoreFrequency, generateCoreFrequencyTextView, generateCoreMHz,
          generateCoreTextView, generateGB, generateGHz, generateGPUName, generateGPUNameTextView,
          generateGPUPrice, generateGPUPriceTextView, generateGPUTextView, generateMBs, generateMHz,
          generateMemoryFrequency, generateMemoryFrequencyTextView, generateMemoryMHz,
          generateMotherboardName, generateMotherboardNameTextView, generateMotherboardPrice,
          generateMotherboardPriceTextView, generateMotherboardTextView, generatePCTextView,
          generatePSUName, generatePSUNameTextView, generatePSUPrice, generatePSUPriceTextView,
          generatePSUTextView, generateRAMFrequency, generateRAMFrequencyTextView, generateRAMGB,
          generateRAMName, generateRAMNameTextView, generateRAMPrice, generateRAMPriceTextView,
          generateRAMSize, generateRAMSizeTextView, generateRAMTextView, generateStorageName,
          generateStorageNameTextView, generateStoragePrice, generateStoragePriceTextView,
          generateStorageSize, generateStorageSizeTextView, generateStorageTextView,
          generateTotalPrice, generateTotalPriceTextView, generateTransferSpeed,
          generateTransferSpeedTextView, generateVRAM, generateVRAMGB, generateVRAMTextView,
          generateW, generateWattage, generateWattageTextView);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
